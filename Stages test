class Stages:

    stageNumber=None
    mass=None
    angle=None
    thrust=None
    amountOfFuel=None
    def __init__(self,number):
       self.stageNumber=number
       print(self.stageNumber)      

#Angle information- Creates a lable and an entry box (Which can be cleared) as well as declares the variable for the value of launch velocity
stageValue=StringVar()
stageValue.set("Stage 0")    
lable_stageValue=Label(inputPos, textvariable=stageValue,fg ="#8c8c8c",bg ="White",font=MainFont)
lable_stageValue.place(x=(width/2)-50,y=0)

#Mass widgets
mass=StringVar()
lable_Mass=Label(inputPos, text="Mass",fg ="#8c8c8c",bg ="White",font=MainFont)     
lable_Mass.place(y=150)
entry_Mass=Entry(inputPos,textvariable=mass, fg ="#E24A33 ",bg ="#E5E5E5",relief=FLAT)
entry_Mass.place(y=200)

#Angle widgets
angle=StringVar()
lable_Angle=Label(inputPos, text="Angle",fg ="#8c8c8c",bg ="White",font=MainFont)     
lable_Angle.place(x=(width/2)-50,y=150)
entry_Angle=Entry(inputPos, textvariable=angle,fg ="#E24A33 ",bg ="#E5E5E5",relief=FLAT)
entry_Angle.place(x=(width/2)-50,y=200)

#Fuel widgets
fuel=StringVar()
lable_Fuel=Label(inputPos, text="Fuel",fg ="#8c8c8c",bg ="White",font=MainFont)     
lable_Fuel.place(x=width-100,y=150)
entry_Fuel=Entry(inputPos, textvariable=fuel,fg ="#E24A33 ",bg ="#E5E5E5",relief=FLAT)
entry_Fuel.place(x=width-100,y=200)

#Thrust widgets
thrust=StringVar()
lable_Thrust=Label(inputPos, text="Engine thrust",fg ="#8c8c8c",bg ="White",font=MainFont)     
lable_Thrust.place(y=300)
entry_Thrust=Entry(inputPos, textvariable=thrust,fg ="#E24A33 ",bg ="#E5E5E5",relief=FLAT)
entry_Thrust.place(y=350)
######################################
stagesList=list()
startStage=Stages(0)
stagesList.append(startStage)
print("LEN STAGES LIST %i"%(len(stagesList)))

currentStageNumber=0
#Remove the entry assignments on both left and right (they are redundant)
def changeStageState(event,option,):
    global currentStageNumber
    if option=="Add":
        currentStageNumber+=1
        currentStage=Stages(currentStageNumber)
        stagesList.append(currentStage)
        stageValue.set("Stage %i"%(currentStageNumber))
        mass.set("")
        angle.set("")
        fuel.set("")
        thrust.set("")
    elif option=="Left":
        if currentStageNumber!=0:
            currentStageNumber-=1
            stageValue.set("Stage %i"%(currentStageNumber))
            currentStage=stagesList[currentStageNumber]
            mass.set(str(currentStage.mass))
            angle.set(str(currentStage.angle))
            fuel.set(str(currentStage.amountOfFuel))
            thrust.set(str(currentStage.thrust))
    elif option=="Right":
        if currentStageNumber<len(stagesList)-1:
            currentStageNumber+=1
            stageValue.set("Stage %i"%(currentStageNumber))
            currentStage=stagesList[currentStageNumber]
            mass.set(str(currentStage.mass))
            angle.set(str(currentStage.angle))
            fuel.set(str(currentStage.amountOfFuel))
            thrust.set(str(currentStage.thrust))

def saveStage(event):
    print("Saving stage%i"%(currentStageNumber))
    stagesList[currentStageNumber].mass=entry_Mass.get()
    stagesList[currentStageNumber].angle=entry_Angle.get()
    stagesList[currentStageNumber].amountOfFuel=entry_Fuel.get()
    stagesList[currentStageNumber].thrust=entry_Thrust.get()
    print(stagesList[currentStageNumber].mass,stagesList[currentStageNumber].angle,stagesList[currentStageNumber].amountOfFuel,stagesList[currentStageNumber].thrust)




#I expect this to work like a queue

#Adds a stage to the rocket
addStageButton=Button(inputPos,text="+ Stage",fg ="#E24A33 ",relief=FLAT,bg="#E5E5E5",font=MainFont)
addStageButton.place(x=width-100,y=0)
addStageButton.bind("<Button-1>",lambda event:changeStageState(event,"Add"))

saveStageButton=Button(inputPos,text="Save Stage",fg ="#E24A33 ",relief=FLAT,bg="#E5E5E5",font=MainFont)
saveStageButton.place(x=width-125,y=height-45)
saveStageButton.bind("<Button-1>",lambda event:saveStage(event))

#Cycles to the stage before the current one current stage=0 then don't show
cycleStageLeft=Button(inputPos,text="<",fg ="#E24A33 ",relief=FLAT,bg="#E5E5E5",font=MainFont)
cycleStageLeft.place(x=(width/2)-100)
cycleStageLeft.bind("<Button-1>",lambda event:changeStageState(event,"Left"))
#Cycles to the stage after the current one# current stage=max then don't show
cycleStageRight=Button(inputPos,text=">",fg ="#E24A33 ",relief=FLAT,bg="#E5E5E5",font=MainFont)
cycleStageRight.place(x=(width/2)+50)
cycleStageRight.bind("<Button-1>",lambda event:changeStageState(event,"Right"))
